@* MovieDetais*@
@page "/movie/{movieId:int}"
@inject TMDBClientService TMDBClientService
@inject NavigationManager _navManager

@if (movie is not null)
{
    <PageTitle>@movie.Title</PageTitle>

}

<div class="container-fluid p-0">
    @if (movie is null)
    {
        <div class="py-5 justify-content-center align-items-center">
            @if (isLoading)
            {
                <h2 class="text-muted"> Loading movies . . . </h2>
            }
            else
            {
                <h2 class="text-muted">
                    Movie could not be found . . .
                </h2>
            }
        </div>
    }
    else
    {
        <div id="movie-details" style="--background: url(@movie.BackdropPath)">
            <div id="movie-wrapper">
                <div class="container-xxl py-3">
                    <div class="row">
                        <div class="col-12 col-md-4 col-xl-3 text-center text-md-start mb-3">
                            <img class="img-fluid" id="movie-poster" src="@movie.PosterPath" />
                        </div>
                        <div class="col-12 col-md-8 col-xl-9">
                            <h3 class="display-6 fw-bold mb-0 text-light">@movie.Title</h3>

                            <div class="lead mb-3">@movie.Tagline</div>
                            <div class="hstack gap-2">
                                @{
                                    bool dateParsed = DateTime.TryParse(movie.ReleaseDate, out DateTime releaseDate);
                                }
                                @if (dateParsed)
                                {
                                    <span>@releaseDate.ToString("MMMM dd, yyyy") | </span>
                                }
                                <span>
                                    @{
                                        int hours = movie.Runtime / 60;
                                        int minutes = movie.Runtime % 60;
                                    }
                                    @hours hour @minutes minutes
                                </span>
                            </div>
                            <div class="hstack gap-2 my-2">
                                @foreach (var genre in movie.Genres)
                                {
                                    <span class="badge text-bg-primary">@genre.Name</span>
                                }

                            </div>
                            <h5 class="lead fw-bold pt-3 mt-3 text-light">Overview</h5>
                            <p class="lead text-light">
                                @movie.Overview
                            </p>
                            <div>
                               @*  Calculation: convert to percentage(two decimal places) *@
                                <span id="movie-rating">User Score: @((movie.VoteAverage * 10).ToString("F2"))%</span>
                            </div>
                            @if (true)
                            {
                                
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

</div>




@code {
    [Parameter]
    public int MovieId { get; set; }

    private MovieDetails? movie;

    private bool isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            isLoading = true;
            movie = await TMDBClientService.GetMovieDetailsAsync(MovieId);
            isLoading = false;
        }
        catch (Exception ex)
        {

            Console.WriteLine($"Error fetching movie details: {ex.Message}");
        }
        finally
        {
            // Ensure loading state is reset even if an error occurs
            isLoading = false;
        }
    }
}
