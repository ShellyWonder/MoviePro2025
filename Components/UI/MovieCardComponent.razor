@* MovieCardComponent *@

@inject FavoritesService _favoritesService

<div class="movieCard card h-100">
    <img src="@Movie?.PosterPath" class="card-img-top" alt="Movie Poster Placeholder" />
    <div class="card-body border border-top">
        <div class="card-title fw-bold 1h-1">@*1h-1 = line height 1*@
            <h5 class="card-title">
                @Movie.Title.ToUpper()
            </h5>
        </div>
        <div class="card-text 1h-1 fst-italic">
            <span class="badge bg-primary">
                Release Date:
                @(DateTime.TryParse(Movie.ReleaseDate, out var parsedDate)
                    ? parsedDate.ToString("MMMM dd, yyyy")
                    : "Release date not available.")
            </span>
        </div>
        <!-- Spacer div to fill available space -->
        <div class="flex-grow-1"></div>
        <div class="d-flex justify-content-center">
            <StarRatingComponent VoteAverage="Movie.VoteAverage" />
        </div>
    </div>
    <div class="card-footer  movieCardFooter d-flex justify-content-between">
        <button class="btn btn-outline-primary" @onclick="HandleToggleFavorite">
            @(isFavorite ? "Remove Favorite" : "Add Favorite")
        </button>
        <a href="/movie/@Movie.Id" class="btn btn-primary">Details</a>
    </div>
</div>


@code {
    [Parameter, EditorRequired]
    public Movie? Movie { get; set; }

    [Parameter]
    public EventCallback OnChange { get; set; }

    bool isFavorite;

    protected override async Task OnParametersSetAsync()
    {
        if (Movie is not null)
        {
            // Check if the movie is already a favorite
            isFavorite = await _favoritesService.IsFavoriteAsync(Movie.Id);

        }
    }

    private async Task HandleToggleFavorite()
    {
        if (Movie is null)
        {
            return;
        }

        if (isFavorite)
        {
            await _favoritesService.RemoveFavoriteAsync(Movie);
            //reflect the change of "isFavorite" status
            isFavorite = false;
        }
        else
        {
            await _favoritesService.AddFavoriteAsync(Movie);
            //reflect the change of "isFavorite" status

            isFavorite = true;
        }
        //calling the method on the parent to refresh button
        await OnChange.InvokeAsync();

    }
}
